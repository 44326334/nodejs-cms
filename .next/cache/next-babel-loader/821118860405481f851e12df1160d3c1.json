{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\n// import constructors from './constructors';\n// const URL = 'http://localhost:3000/admin/api'\nvar domain = 'http://localhost';\nvar port = '3000';\nvar route = 'admin/api';\n\nvar queryDocs = require('./constructors');\n\nvar GRAPHQL_URL = 'http://localhost:3000/admin/api';\n\nvar createCall = function createCall(queryDoc) {\n  var payload, response;\n  return _regeneratorRuntime.async(function createCall$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _JSON$stringify({\n            queryDoc: queryDoc\n          });\n          _context.prev = 1;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetch(GRAPHQL_URL, {\n            method: 'POST',\n            headers: {// Authorization: `token ${accessToken}`,\n            },\n            body: payload\n          }));\n\n        case 4:\n          response = _context.sent;\n          _context.next = 13;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 11:\n          body = _context.sent;\n          return _context.abrupt(\"return\", {\n            status: response.status,\n            ok: response.ok,\n            body: body.data,\n            message: _context.t0.message\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 7]]);\n};\n\nexport var queryid = function queryid() {\n  createCall(queryDocs.queryAllUsers);\n};","map":{"version":3,"sources":["C:/cmsapp/api/index.js"],"names":["domain","port","route","queryDocs","require","GRAPHQL_URL","createCall","queryDoc","payload","fetch","method","headers","body","response","json","status","ok","data","message","queryid","queryAllUsers"],"mappings":";;AAAA;AAEA;AACA,IAAMA,MAAM,GAAG,kBAAf;AACA,IAAMC,IAAI,GAAG,MAAb;AACA,IAAMC,KAAK,GAAG,WAAd;;AACA,IAAMC,SAAS,GAAGC,OAAO,CAAC,gBAAD,CAAzB;;AACA,IAAMC,WAAW,GAAG,iCAApB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,UAAAA,OADW,GACD,gBAAe;AAC7BD,YAAAA,QAAQ,EAARA;AAD6B,WAAf,CADC;AAAA;AAAA;AAAA,2CAMEE,KAAK,CACpBJ,WADoB,EAEpB;AACEK,YAAAA,MAAM,EAAE,MADV;AAEEC,YAAAA,OAAO,EAAE,CACP;AADO,aAFX;AAKEC,YAAAA,IAAI,EAAEJ;AALR,WAFoB,CANP;;AAAA;AAMfK,UAAAA,QANe;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,2CAiBFA,QAAQ,CAACC,IAAT,EAjBE;;AAAA;AAiBfF,UAAAA,IAjBe;AAAA,2CAkBR;AACLG,YAAAA,MAAM,EAAEF,QAAQ,CAACE,MADZ;AAELC,YAAAA,EAAE,EAAEH,QAAQ,CAACG,EAFR;AAGLJ,YAAAA,IAAI,EAAEA,IAAI,CAACK,IAHN;AAILC,YAAAA,OAAO,EAAE,YAAEA;AAJN,WAlBQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AA2BA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAC3Bb,EAAAA,UAAU,CAACH,SAAS,CAACiB,aAAX,CAAV;AACD,CAFM","sourcesContent":["// import constructors from './constructors';\r\n\r\n// const URL = 'http://localhost:3000/admin/api'\r\nconst domain = 'http://localhost';\r\nconst port = '3000';\r\nconst route = 'admin/api';\r\nconst queryDocs = require('./constructors')\r\nconst GRAPHQL_URL = 'http://localhost:3000/admin/api'\r\n\r\nconst createCall = async (queryDoc) => {\r\n  const payload = JSON.stringify({\r\n    queryDoc,\r\n  });\r\n  let response; \r\n  try {\r\n    response = await fetch(\r\n      GRAPHQL_URL,\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          // Authorization: `token ${accessToken}`,\r\n        },\r\n        body: payload,\r\n      }\r\n    );\r\n  } catch(e) {\r\n    body = await response.json();\r\n    return {\r\n      status: response.status,\r\n      ok: response.ok,\r\n      body: body.data,\r\n      message: e.message\r\n    };\r\n  }\r\n}\r\n\r\nexport const queryid = () => {\r\n  createCall(queryDocs.queryAllUsers)\r\n}"]},"metadata":{},"sourceType":"module"}