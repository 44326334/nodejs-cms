{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\n// import constructors from './constructors';\n// const URL = 'http://localhost:3000/admin/api'\nvar domain = 'http://localhost';\nvar port = '3000';\nvar route = 'admin/api';\n\nvar queryDocs = require('./constructors');\n\nvar GRAPHQL_URL = 'http://localhost:3000/admin/api';\n\nvar createCall = function createCall(queryDoc, cb) {\n  var payload, response, body;\n  return _regeneratorRuntime.async(function createCall$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _JSON$stringify({\n            query: queryDoc\n          });\n          _context.prev = 1;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetch(GRAPHQL_URL, {\n            method: 'POST',\n            headers: {\n              // Authorization: `token ${accessToken}`,\n              'Content-Type': 'application/json'\n            },\n            body: payload\n          }));\n\n        case 4:\n          response = _context.sent;\n          _context.next = 10;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](1);\n          return _context.abrupt(\"return\", {\n            message: _context.t0.message,\n            ok: false,\n            body: {}\n          });\n\n        case 10:\n          _context.prev = 10;\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 13:\n          body = _context.sent;\n          _context.next = 19;\n          break;\n\n        case 16:\n          _context.prev = 16;\n          _context.t1 = _context[\"catch\"](10);\n          return _context.abrupt(\"return\", {\n            message: _context.t1.message,\n            ok: response.ok,\n            body: {}\n          });\n\n        case 19:\n          if (response.ok) {\n            _context.next = 21;\n            break;\n          }\n\n          return _context.abrupt(\"return\", {\n            status: response.status,\n            ok: response.ok,\n            body: {}\n          });\n\n        case 21:\n          return _context.abrupt(\"return\", body.data ? {\n            status: response.status,\n            ok: response.ok,\n            body: body.data\n          } : {\n            status: response.status,\n            ok: false,\n            body: {}\n          });\n\n        case 22:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 7], [10, 16]]);\n};\n\nexport var queryid = function queryid(query) {\n  createCall(queryDocs.queryAllUsers(query));\n};","map":{"version":3,"sources":["C:/cmsapp/api/index.js"],"names":["domain","port","route","queryDocs","require","GRAPHQL_URL","createCall","queryDoc","cb","payload","query","fetch","method","headers","body","response","message","ok","json","status","data","queryid","queryAllUsers"],"mappings":";;AAAA;AAEA;AACA,IAAMA,MAAM,GAAG,kBAAf;AACA,IAAMC,IAAI,GAAG,MAAb;AACA,IAAMC,KAAK,GAAG,WAAd;;AACA,IAAMC,SAAS,GAAGC,OAAO,CAAC,gBAAD,CAAzB;;AACA,IAAMC,WAAW,GAAG,iCAApB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOC,QAAP,EAAiBC,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,UAAAA,OADW,GACD,gBAAe;AAC7BC,YAAAA,KAAK,EAAEH;AADsB,WAAf,CADC;AAAA;AAAA;AAAA,2CAMEI,KAAK,CACpBN,WADoB,EAEpB;AACEO,YAAAA,MAAM,EAAE,MADV;AAEEC,YAAAA,OAAO,EAAE;AACP;AACA,8BAAgB;AAFT,aAFX;AAMEC,YAAAA,IAAI,EAAEL;AANR,WAFoB,CANP;;AAAA;AAMfM,UAAAA,QANe;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,2CAkBR;AACLC,YAAAA,OAAO,EAAE,YAAEA,OADN;AAELC,YAAAA,EAAE,EAAE,KAFC;AAGLH,YAAAA,IAAI,EAAE;AAHD,WAlBQ;;AAAA;AAAA;AAAA;AAAA,2CA0BFC,QAAQ,CAACG,IAAT,EA1BE;;AAAA;AA0BfJ,UAAAA,IA1Be;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,2CA4BR;AACLE,YAAAA,OAAO,EAAE,YAAEA,OADN;AAELC,YAAAA,EAAE,EAAEF,QAAQ,CAACE,EAFR;AAGLH,YAAAA,IAAI,EAAE;AAHD,WA5BQ;;AAAA;AAAA,cAkCbC,QAAQ,CAACE,EAlCI;AAAA;AAAA;AAAA;;AAAA,2CAmCR;AACLE,YAAAA,MAAM,EAAEJ,QAAQ,CAACI,MADZ;AAELF,YAAAA,EAAE,EAAEF,QAAQ,CAACE,EAFR;AAGLH,YAAAA,IAAI,EAAE;AAHD,WAnCQ;;AAAA;AAAA,2CAyCVA,IAAI,CAACM,IAAL,GACN;AACCD,YAAAA,MAAM,EAAEJ,QAAQ,CAACI,MADlB;AAECF,YAAAA,EAAE,EAAEF,QAAQ,CAACE,EAFd;AAGCH,YAAAA,IAAI,EAAEA,IAAI,CAACM;AAHZ,WADM,GAMN;AACCD,YAAAA,MAAM,EAAEJ,QAAQ,CAACI,MADlB;AAECF,YAAAA,EAAE,EAAE,KAFL;AAGCH,YAAAA,IAAI,EAAE;AAHP,WA/CgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAsDA,OAAO,IAAMO,OAAO,GAAG,SAAVA,OAAU,CAACX,KAAD,EAAW;AAChCJ,EAAAA,UAAU,CAACH,SAAS,CAACmB,aAAV,CAAwBZ,KAAxB,CAAD,CAAV;AACD,CAFM","sourcesContent":["// import constructors from './constructors';\r\n\r\n// const URL = 'http://localhost:3000/admin/api'\r\nconst domain = 'http://localhost';\r\nconst port = '3000';\r\nconst route = 'admin/api';\r\nconst queryDocs = require('./constructors')\r\nconst GRAPHQL_URL = 'http://localhost:3000/admin/api'\r\n\r\nconst createCall = async (queryDoc, cb) => {\r\n  const payload = JSON.stringify({\r\n    query: queryDoc\r\n  });\r\n  let response; \r\n  try {\r\n    response = await fetch(\r\n      GRAPHQL_URL,\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          // Authorization: `token ${accessToken}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: payload,\r\n      }\r\n    );\r\n  } catch(e) {\r\n    return {\r\n      message: e.message,\r\n      ok: false,\r\n      body: {}\r\n    }\r\n  }\r\n  let body\r\n  try {\r\n    body = await response.json();\r\n  } catch(e) {\r\n    return {\r\n      message: e.message,\r\n      ok: response.ok,\r\n      body: {}\r\n    }\r\n  }\r\n  if(!response.ok) {\r\n    return {\r\n      status: response.status,\r\n      ok: response.ok,\r\n      body: {}\r\n    }\r\n  }\r\n  return body.data\r\n  ?{\r\n    status: response.status,\r\n    ok: response.ok,\r\n    body: body.data\r\n  }\r\n  :{\r\n    status: response.status,\r\n    ok: false,\r\n    body: {}\r\n  }\r\n}\r\n\r\nexport const queryid = (query) => {\r\n  createCall(queryDocs.queryAllUsers(query))\r\n}"]},"metadata":{},"sourceType":"module"}